var searchIndex = {};
searchIndex["bytebuffer"] = {"doc":"","items":[[3,"ByteBuffer","bytebuffer","A byte buffer object specifically turned to easily read and write binary values",null,null],[11,"new","","Construct a new, empty, ByteBuffer",0,{"inputs":[],"output":{"name":"bytebuffer"}}],[11,"from_bytes","","Construct a new ByteBuffer filled with the data array.",0,null],[11,"len","","Return the buffer size",0,null],[11,"clear","","Clear the buffer and reinitialize the reading and writing cursor",0,null],[11,"resize","","Change the buffer size to size.",0,null],[11,"write_bytes","","Append a byte array to the buffer. The buffer is automatically extended if needed",0,null],[11,"write_u8","","Append a byte (8 bits value) to the buffer",0,null],[11,"write_i8","","Same as `write_u8()` but for signed values",0,null],[11,"write_u16","","Append a word (16 bits value) to the buffer",0,null],[11,"write_i16","","Same as `write_u16()` but for signed values",0,null],[11,"write_u32","","Append a double word (32 bits value) to the buffer",0,null],[11,"write_i32","","Same as `write_u32()` but for signed values",0,null],[11,"write_u64","","Append a quaddruple word (64 bits value) to the buffer",0,null],[11,"write_i64","","Same as `write_u64()` but for signed values",0,null],[11,"write_f32","","Append a 32 bits floating point number to the buffer.",0,null],[11,"write_f64","","Append a 64 bits floating point number to the buffer.",0,null],[11,"write_string","","Append a string to the buffer.",0,null],[11,"read_bytes","","Read a defined amount of raw bytes. The program crash if not enough bytes are available",0,null],[11,"read_u8","","Read one byte. The program crash if not enough bytes are available",0,null],[11,"read_i8","","Same as `read_u8()` but for signed values",0,null],[11,"read_u16","","Read a 2-bytes long value. The program crash if not enough bytes are available",0,null],[11,"read_i16","","Same as `read_u16()` but for signed values",0,null],[11,"read_u32","","Read a four-bytes long value. The program crash if not enough bytes are available",0,null],[11,"read_i32","","Same as `read_u32()` but for signed values",0,null],[11,"read_u64","","Read an eight bytes long value. The program crash if not enough bytes are available",0,null],[11,"read_i64","","Same as `read_u64()` but for signed values",0,null],[11,"read_f32","","Read a 32 bits floating point value. The program crash if not enough bytes are available",0,null],[11,"read_f64","","Read a 64 bits floating point value. The program crash if not enough bytes are available",0,null],[11,"read_string","","Read a string.",0,null],[11,"to_string","","Dump the byte buffer to a string.",0,null],[11,"get_rpos","","Return the position of the reading cursor",0,null],[11,"set_rpos","","Set the reading cursor position.\n*Note* : Set the reading cursor to `min(newPosition, self.len())` to prevent overflow",0,null],[11,"get_wpos","","Return the writing cursor position",0,null],[11,"set_wpos","","Set the writing cursor position.\n*Note* : Set the writing cursor to `min(newPosition, self.len())` to prevent overflow",0,null],[11,"to_bytes","","Return the raw byte buffer.",0,null],[11,"read_bit","","Read 1 bit. Return true if the bit is set to 1, otherwhise, return false.",0,null],[11,"read_bits","","Read n bits. an return the corresponding value an u64.",0,null],[11,"flush_bit","","Discard all the pending bits available for reading or writing and place the the corresponding cursor to the next byte.",0,null],[11,"write_bit","","Append 1 bit value to the buffer.\nThe bit is happened like this :",0,null],[11,"write_bits","","Write the given value as a sequence of n bits",0,null],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,null],[11,"fmt","","",0,null]],"paths":[[3,"ByteBuffer"]]};
initSearch(searchIndex);
